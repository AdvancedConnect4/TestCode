package connect4;

import java.util.Scanner;


public class Logic
{
    public int yellow = 0; //if the yellow player bids more, this will allow them to play the next move

    public int red = 1; //if the red player bids more, this will allow them to play the next move

    public int tie = 2; //if there is a tie

    public int yellowCoins = 100; //not currently used

    public int redCoins = 100; //not currently used

    private int nextRedBid; //supposed to store the value of the AI's bid from the ComputerPlayer class
    private int nextRedMove; //supposed to store the next move of the AI from the computerPlayer class

    /**
    *sets the next red Bid to the one from the computer player(idk what this does)
    */
    public void setNextRedBid( int nextBid )
    {
        nextRedBid = nextBid;
    }
    /**
    *sets the next red move to the one from the computer player(idk what this does)
    */
    public void setNextRedMove( int nextMove )
    {
        nextRedMove = nextMove;
    }
    // dont worry about this one
    public int setRedCoins( int subtract )
    {
        return red;
    }
    //idk what this is for(who wrote this
    public int getRedCoins()
    {
        return redCoins;
    }
    //idk what this is for
    public int getYellowCoins()
    {
        return yellowCoins;
    }


    public String[][] createGrid()
    {
        String[][] grid = new String[7][15];
        for ( int row = 0; row < grid.length; row++ )
        {
            for ( int col = 0; col < grid[row].length; col++ )
            {
                if ( col % 2 == 0 )
                {
                    grid[row][col] = "|";
                }
                else
                {
                    grid[row][col] = " ";
                }
                if ( row == 6 )
                {
                    grid[row][col] = "-";
                }
            }
        }
        return grid;
    }


    public void printGrid( String[][] grid )
    {
        for ( int row = 0; row < grid.length; row++ )
        {
            for ( int col = 0; col < grid[row].length; col++ )
            {
                System.out.print( grid[row][col] );
            }
            System.out.println();
        }
    }

    //next player should get the nextRedBid from the value of the field. Then it will compare it as usual
    public int getNextPlayer()
    {
//         System.out.println("How much to bid(red): ");
//        
//         Scanner scan = new Scanner(System.in);
//        
//         int redPlayer = scan.nextInt();


        if ( nextRedBid > redCoins )
        {
            System.out.println( "You don't have that many coins. This bid is invalid and "
                + "your turn is skipped" );
            nextRedBid = 0;
        }
        redCoins = redCoins - nextRedBid;

        System.out.println( "How much to bid(yellow): " );
        Scanner scan = new Scanner( System.in );
        int playerYellow = scan.nextInt();
        if ( playerYellow > yellowCoins )
        {
            System.out.println( "You don't have that many coins. This bid is invalid and "
                + "your turn is skipped" );
            playerYellow = 0;
        }
        yellowCoins = yellowCoins - playerYellow;

        if ( playerYellow > nextRedBid )
        {
            return yellow;
        }
        else if ( playerYellow == nextRedBid )
        {
            return tie;
        }
        else
        {
            return red;
        }

    }

    //currently not in use, the connectfour class uses the dropRedPatternAI
    public void dropRedPattern( String[][] grid )
    {
        System.out.println( "Drop a red token in column (0 -6): " );

        Scanner scan = new Scanner( System.in );
        nextRedMove = scan.nextInt();

        int changeToOdd = ( 2 * nextRedMove ) + 1;

        for ( int row = 5; row >= 0; row-- )
        {
            if ( grid[row][changeToOdd] == " " )
            {
                grid[row][changeToOdd] = "R";
                break;
            }
        }

    }
    //currently this works, it gets the value from the ComputerPlayer class and if red wins the bid, it will play the move it got
    public void dropRedPatternAI( String[][] grid )
    {
        int changeToOdd = ( 2 * nextRedMove ) + 1;

        for ( int row = 5; row >= 0; row-- )
        {
            if ( grid[row][changeToOdd] == " " )
            {
                grid[row][changeToOdd] = "R";
                break;
            }
        }

    }


    public void dropYellowPattern( String[][] grid )
    {
        System.out.println( "Drop a yellow disk at column (0â€“6): " );

        Scanner scan = new Scanner( System.in );

        int changeToOdd = 2 * scan.nextInt() + 1;

        for ( int row = 5; row >= 0; row-- )
        {
            if ( grid[row][changeToOdd] == " " )
            {
                grid[row][changeToOdd] = "Y";
                break;
            }
        }

    }


    public String checkWinner( String[][] grid )
    {
        for ( int row = 0; row < 6; row++ )
        {
            for ( int col = 0; col < 7; col += 2 )
            {
                if ( ( grid[row][col + 1] != " " ) && ( grid[row][col + 3] != " " )
                    && ( grid[row][col + 5] != " " ) && ( grid[row][col + 7] != " " )
                    && ( ( grid[row][col + 1] == grid[row][col + 3] )
                        && ( grid[row][col + 3] == grid[row][col + 5] )
                        && ( grid[row][col + 5] == grid[row][col + 7] ) ) )
                    return grid[row][col + 1];
            }
        }

        for ( int row = 1; row < 15; row += 2 )
        {
            for ( int col = 0; col < 3; col++ )
            {
                if ( ( grid[col][row] != " " ) && ( grid[col + 1][row] != " " )
                    && ( grid[col + 2][row] != " " ) && ( grid[col + 3][row] != " " )
                    && ( ( grid[col][row] == grid[col + 1][row] )
                        && ( grid[col + 1][row] == grid[col + 2][row] )
                        && ( grid[col + 2][row] == grid[col + 3][row] ) ) )
                    return grid[col][row];
            }
        }

        for ( int row = 0; row < 3; row++ )
        {
            for ( int col = 1; col < 9; col += 2 )
            {
                if ( ( grid[row][col] != " " ) && ( grid[row + 1][col + 2] != " " )
                    && ( grid[row + 2][col + 4] != " " ) && ( grid[row + 3][col + 6] != " " )
                    && ( ( grid[row][col] == grid[row + 1][col + 2] )
                        && ( grid[row + 1][col + 2] == grid[row + 2][col + 4] )
                        && ( grid[row + 2][col + 4] == grid[row + 3][col + 6] ) ) )
                    return grid[row][col];
            }
        }

        for ( int row = 0; row < 3; row++ )
        {
            for ( int col = 7; col < 15; col += 2 )
            {
                if ( ( grid[row][col] != " " ) && ( grid[row + 1][col - 2] != " " )
                    && ( grid[row + 2][col - 4] != " " ) && ( grid[row + 3][col - 6] != " " )
                    && ( ( grid[row][col] == grid[row + 1][col - 2] )
                        && ( grid[row + 1][col - 2] == grid[row + 2][col - 4] )
                        && ( grid[row + 2][col - 4] == grid[row + 3][col - 6] ) ) )
                    return grid[row][col];
            }
        }
        return null;
    }

}
